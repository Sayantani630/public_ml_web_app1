# -*- coding: utf-8 -*-
"""Copy of Project(Diabetes Prediction).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13E04ldxgoEKaOgPdcg2WRruJttdTEmEW

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler  #standardize our da ta
from sklearn.model_selection import train_test_split  #to check accuracy
from sklearn import svm                              #import the model(support vector machine)
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis"""

diabetes_dataset=pd.read_csv('diabetes.csv')    #loading the diabetes dataset to pandas dataframe

diabetes_dataset.head()   #printing the first 5 rows of the dataset

diabetes_dataset.shape   #number of rows and columns in this dataset

diabetes_dataset.describe()  #statistical measures of the data

diabetes_dataset['Outcome'].value_counts()     # 0 --> Non-diabetic , 1 --> Diabetic

diabetes_dataset.groupby('Outcome').mean()

X=diabetes_dataset.drop(columns='Outcome',axis=1)    # separarting the data and labels
Y=diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler=StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X)
print(standardized_data)

X=standardized_data
Y=diabetes_dataset['Outcome']

print(X)

print(Y)

"""Train Test Split"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

print(Y.shape,Y_train.shape,Y_test.shape)

"""Training the model"""

classifier=svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)   #training the support vector machine classifier

"""Model Evaluation

1.Accuracy Score
"""

X_train_prediction=classifier.predict(X_train)                  #accuracy score on the training data
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of the training data : ',training_data_accuracy)

X_test_prediction=classifier.predict(X_test)                  #accuracy score on the test data
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of the test data : ',test_data_accuracy)

"""2.Making a predictive system"""

input_data=(4,110,92,0,0,37.6,0.191,30)

input_data_as_numpy_array=np.asarray(input_data)          # changing the input_data to numpy array

input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)   # reshape the array as we are predicting for one instance

std_data=scaler.transform(input_data_reshaped)               #standardize the input data
print(std_data)

prediction=classifier.predict(std_data)
print(prediction)


if (prediction[0]==0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

input_data=(5,166,72,19,175,25.8,0.587,51)

input_data_as_numpy_array=np.asarray(input_data)          # changing the input_data to numpy array

input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)   # reshape the array as we are predicting for one instance

std_data=scaler.transform(input_data_reshaped)               #standardize the input data
print(std_data)

prediction=classifier.predict(std_data)
print(prediction)


if (prediction[0]==0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')