# -*- coding: utf-8 -*-
"""Project(Heart Disease).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qwVeBj-v6cRGkJ6-HAI4IEG4W6qMmLcc

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

heart_data = pd.read_csv('/content/heart_disease_data.csv')    # loading the csv data to a pandas dataframe

heart_data.head()     # print first 5 rows of the dataset

heart_data.tail()     # print last 5 rows of the dataset

heart_data.shape    # number of rows and columns in the dataset

heart_data.info()   # getting soe info about the data

heart_data.isnull().sum()     # chceking for missing values

heart_data.describe()      # statistical measure about the data

heart_data['target'].value_counts()   # checking the distribution of target variable
                                      # 1 --> Defective Heart  , 0--> Healthy Heart

"""Spliting the features and target"""

X= heart_data.drop(columns='target', axis=1)
Y= heart_data['target']

print(X)

print(Y)

"""Spliting the data into training data and test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

print(Y.shape,Y_train.shape,Y_test.shape)

"""Model Training

Logistic Regression
"""

model=LogisticRegression()

model.fit(X_train,Y_train)       # training the logisticregression model with training data

"""Model Evaluation

Accuracy Score
"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy on trining data :',training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data :',test_data_accuracy)

"""Building a predictive system"""

input_data=(41,0,1,130,204,0,0,172,0,1.4,2,0,2)

input_data_as_numpy_array=np.asarray(input_data)    # change the input data to a numpy array

input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)   # reshape the numpy array

prediction=model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print('The person doesnot have a heart disease')
else:
  print('The person have a heart disease')

input_data=(62,0,0,140,268,0,0,160,0,3.6,0,2,2)

input_data_as_numpy_array=np.asarray(input_data)    # change the input data to a numpy array

input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)   # reshape the numpy array

prediction=model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print('The person doesnot have a heart disease')
else:
  print('The person have a heart disease')